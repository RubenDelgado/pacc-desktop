{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nexport let SesionService = /*#__PURE__*/(() => {\n  class SesionService {\n    constructor(http, cookies) {\n      this.http = http;\n      this.cookies = cookies;\n      this.endpoint = '';\n      this.token = '';\n      this.usaurio = \"\";\n      this.password = \"\";\n      this.tokenSession = \"\";\n    }\n\n    getIniciarSesion(user) {\n      this.endpoint = 'https://login.mzoneweb.net/';\n      this.usaurio = user.usuario;\n      this.password = user.password;\n      console.log('ENDPOINT: ' + this.endpoint);\n      console.log('USUARIO: ' + this.usaurio);\n      console.log('PASSWORD: ' + this.password);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Accept': '*/*',\n          'Content-Type': 'application/x-www-form-urlencoded'\n        })\n      };\n      console.log('HEADERS: ' + JSON.stringify(httpOptions));\n      const body = new HttpParams().set('grant_type', 'password').set('client_id', 'mz-a3tek').set('client_secret', 'WJ4wUJo79qFsMm4T9Rj7dKw4').set('scope', 'openid mz6-api.all mz_username').set('username', this.usaurio).set('password', this.password);\n      console.log('BODY: ' + JSON.stringify(body));\n      return this.http.post(this.endpoint + 'connect/token', body, httpOptions).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getValidarPrivilegioPACC(tokenSesion) {\n      this.token = tokenSesion;\n      let format = 'json';\n      let count = true;\n      let skip = 0;\n      let select = 'id,username,phoneOffice,loginEnabled';\n      this.endpoint = 'https://live.mzoneweb.net/mzone62.api/Users?$format=' + format + '&$count=' + count + '&$skip=' + skip + '&$select=' + select;\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Authorization': 'Bearer ' + this.token\n        })\n      };\n      console.log('HEADERS: ' + JSON.stringify(httpOptions));\n      return this.http.get(this.endpoint, httpOptions).pipe(retry(1), catchError(this.handleError));\n    } // Error handling \n\n\n    handleError(error) {\n      console.log(\"ERROR DE PETICION: \" + JSON.stringify(error));\n      console.log('>>>>> ERROR: ' + error.message);\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        console.log('ENTRO CUANDO ES ERROR EVENT (Get client-side error)'); // Get client-side error\n\n        errorMessage = error.error.message;\n      } else {\n        console.log('ENTRO CUANDO ES OTRO ERROR (Get server-side error)'); // Get server-side error\n\n        let mensaje = '';\n\n        if (error.hasOwnProperty('error.error_description')) {\n          if (typeof error.error.error_description !== 'undefined' && error.error.error_description != undefined && error.error.error_description != null) {\n            console.log(\"MENSAJE DE ERROR 1 : \" + error.error.error_description);\n            mensaje = error.error.error_description;\n          } else {\n            console.log('NO ES ERROR: error.error.error_description');\n          }\n        }\n\n        if (error.hasOwnProperty('error.error.message')) {\n          if (typeof error.error.error.message !== 'undefined' && error.error.error.message != undefined && error.error.error.message != null) {\n            console.log(\"MENSAJE DE ERROR 2 : \" + error.error.error.message);\n            mensaje = error.error.error.message;\n          } else {\n            console.log('NO ES ERROR: error.error.error.message');\n          }\n        }\n\n        if (error.hasOwnProperty('message')) {\n          if (typeof error.message !== 'undefined' && error.message != undefined && error.message != null) {\n            console.log(\"MENSAJE DE ERROR 3 : \" + error.message);\n            mensaje = error.message;\n          } else {\n            console.log('NO ES ERROR: error.message');\n          }\n        }\n\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${mensaje}`;\n      } //window.alert(errorMessage);\n\n\n      return throwError(errorMessage);\n    }\n\n    setSession(sessionObj) {\n      localStorage.setItem('session', JSON.stringify(sessionObj));\n    }\n\n    getSession() {\n      return localStorage.getItem(\"session\");\n    }\n\n    deleteSession() {\n      return localStorage.removeItem(\"session\");\n    }\n\n    setToken(token) {\n      this.cookies.set(\"token\", token);\n      localStorage.setItem(\"token\", token);\n    }\n\n    setUsuarioSesion(usuario) {\n      this.cookies.set(\"usuarioSesion\", usuario);\n      localStorage.setItem(\"usuarioSesion\", usuario);\n    }\n\n    setPasswordSesion(password) {\n      this.cookies.set(\"passwordSesion\", password);\n      localStorage.setItem(\"passwordSesion\", password);\n    }\n\n    getToken() {\n      //return this.cookies.get(\"token\");\n      return localStorage.getItem(\"token\");\n    }\n\n    getPasswordSesion() {\n      //return this.cookies.get(\"passwordSesion\");\n      return localStorage.getItem(\"passwordSesion\");\n    }\n\n    getUsuarioSesion() {\n      //return this.cookies.get(\"usuarioSesion\");\n      return localStorage.getItem(\"usuarioSesion\");\n    }\n\n    deleteToken() {\n      //return this.cookies.delete(\"token\");\n      return localStorage.removeItem(\"token\");\n    }\n\n    deleteUsuarioSesion() {\n      //return this.cookies.delete(\"usuarioSesion\");\n      return localStorage.removeItem(\"usuarioSesion\");\n    }\n\n    deletePasswordSesion() {\n      //return this.cookies.get(\"usuarioSesion\");\n      return localStorage.removeItem(\"passwordSesion\");\n    }\n\n  }\n\n  SesionService.ɵfac = function SesionService_Factory(t) {\n    return new (t || SesionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n  };\n\n  SesionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SesionService,\n    factory: SesionService.ɵfac,\n    providedIn: 'root'\n  });\n  return SesionService;\n})();","map":null,"metadata":{},"sourceType":"module"}